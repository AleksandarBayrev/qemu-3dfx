diff -Nru ../orig/qemu-2.6.2/configure ./configure
--- ../orig/qemu-2.6.2/configure	2016-09-29 12:59:38.000000000 -0700
+++ ./configure	2021-07-26 04:12:28.431367800 -0700
@@ -564,6 +564,8 @@
   else
     audio_drv_list=""
   fi
+# For MESA/Glide pass-through ##
+  LIBS="-lgdi32 $LIBS"
 ;;
 GNU/kFreeBSD)
   bsd="yes"
@@ -674,6 +676,8 @@
   vhost_net="yes"
   vhost_scsi="yes"
   QEMU_INCLUDES="-I\$(SRC_PATH)/linux-headers -I$(pwd)/linux-headers $QEMU_INCLUDES"
+# For MESA/Glide pass-through ##
+  LIBS="-ldl -lXxf86vm -lGL $LIBS"
 ;;
 esac
 
diff -Nru ../orig/qemu-2.6.2/hw/Makefile.objs ./hw/Makefile.objs
--- ../orig/qemu-2.6.2/hw/Makefile.objs	2016-09-29 12:59:39.000000000 -0700
+++ ./hw/Makefile.objs	2021-07-26 04:10:08.367661500 -0700
@@ -6,6 +6,7 @@
 devices-dirs-$(CONFIG_SOFTMMU) += char/
 devices-dirs-$(CONFIG_SOFTMMU) += cpu/
 devices-dirs-$(CONFIG_SOFTMMU) += display/
+devices-dirs-$(CONFIG_SOFTMMU) += 3dfx/
 devices-dirs-$(CONFIG_SOFTMMU) += dma/
 devices-dirs-$(CONFIG_SOFTMMU) += gpio/
 devices-dirs-$(CONFIG_SOFTMMU) += i2c/
@@ -15,6 +16,7 @@
 devices-dirs-$(CONFIG_IPACK) += ipack/
 devices-dirs-$(CONFIG_IPMI) += ipmi/
 devices-dirs-$(CONFIG_SOFTMMU) += isa/
+devices-dirs-$(CONFIG_SOFTMMU) += mesa/
 devices-dirs-$(CONFIG_SOFTMMU) += misc/
 devices-dirs-$(CONFIG_SOFTMMU) += net/
 devices-dirs-$(CONFIG_SOFTMMU) += nvram/
diff -Nru ../orig/qemu-2.6.2/hw/i386/pc.c ./hw/i386/pc.c
--- ../orig/qemu-2.6.2/hw/i386/pc.c	2016-09-29 12:59:40.000000000 -0700
+++ ./hw/i386/pc.c	2021-07-26 04:15:14.066748500 -0700
@@ -1537,6 +1537,28 @@
     if (create_fdctrl) {
         fdctrl_init_isa(isa_bus, fd);
     }
+    /* Glide pass-through */
+    glidept_mm_init();
+    /* MESA pass-through */
+    mesapt_mm_init();
+}
+
+void glidept_mm_init(void)
+{
+    DeviceState *glidept_dev = NULL;
+
+    glidept_dev = qdev_new(TYPE_GLIDEPT);
+    sysbus_realize(SYS_BUS_DEVICE(glidept_dev), &error_fatal);
+    sysbus_mmio_map(SYS_BUS_DEVICE(glidept_dev), 0, GLIDEPT_MM_BASE);
+}
+
+void mesapt_mm_init(void)
+{
+    DeviceState *mesapt_dev = NULL;
+
+    mesapt_dev = qdev_new(TYPE_MESAPT);
+    sysbus_realize(SYS_BUS_DEVICE(mesapt_dev), &error_fatal);
+    sysbus_mmio_map(SYS_BUS_DEVICE(mesapt_dev), 0, MESAPT_MM_BASE);
 }
 
 void pc_nic_init(ISABus *isa_bus, PCIBus *pci_bus)
diff -Nru ../orig/qemu-2.6.2/include/hw/i386/pc.h ./include/hw/i386/pc.h
--- ../orig/qemu-2.6.2/include/hw/i386/pc.h	2016-09-29 12:59:42.000000000 -0700
+++ ./include/hw/i386/pc.h	2021-04-01 13:18:10.166090000 -0700
@@ -198,6 +198,18 @@
 
 void gsi_handler(void *opaque, int n, int level);
 
+#define qdev_new(x)         qdev_create(NULL,x)
+#define sysbus_realize(x,y) qdev_init_nofail((DeviceState *)x)
+/* GLIDE pass-through */
+#define TYPE_GLIDEPT "glidept"
+#define GLIDEPT_MM_BASE 0xfbdff000
+void glidept_mm_init(void);
+
+/* MESA pass-through */
+#define TYPE_MESAPT "mesapt"
+#define MESAPT_MM_BASE 0xefffe000
+void mesapt_mm_init(void);
+
 /* vmport.c */
 typedef uint32_t (VMPortReadFunc)(void *opaque, uint32_t address);
 
diff -Nru ../orig/qemu-2.6.2/include/sysemu/kvm.h ./include/sysemu/kvm.h
--- ../orig/qemu-2.6.2/include/sysemu/kvm.h	2016-09-29 12:59:43.000000000 -0700
+++ ./include/sysemu/kvm.h	2021-07-26 04:10:08.404663300 -0700
@@ -443,6 +443,8 @@
 
 #endif /* NEED_CPU_H */
 
+void kvm_update_guest_pa_range(uint64_t start_pa, uint64_t size, void *host_va, int readonly, int add);
+
 void kvm_cpu_synchronize_state(CPUState *cpu);
 void kvm_cpu_synchronize_post_reset(CPUState *cpu);
 void kvm_cpu_synchronize_post_init(CPUState *cpu);
diff -Nru ../orig/qemu-2.6.2/include/sysemu/whpx.h ./include/sysemu/whpx.h
--- ../orig/qemu-2.6.2/include/sysemu/whpx.h	1969-12-31 16:00:00.000000000 -0800
+++ ./include/sysemu/whpx.h	2021-07-26 04:18:09.701086900 -0700
@@ -0,0 +1,3 @@
+#define whpx_update_guest_pa_range(...)
+#define whpx_enabled() (0)
+
diff -Nru ../orig/qemu-2.6.2/include/ui/console.h ./include/ui/console.h
--- ../orig/qemu-2.6.2/include/ui/console.h	2016-09-29 12:59:43.000000000 -0700
+++ ./include/ui/console.h	2021-07-26 04:10:08.424663100 -0700
@@ -457,4 +457,21 @@
 void early_gtk_display_init(int opengl);
 void gtk_display_init(DisplayState *ds, bool full_screen, bool grab_on_hover);
 
+/* glidewnd.c */
+void *glide_prepare_window(int, int);
+void glide_release_window(void);
+int glide_window_stat(int);
+int glide_gui_fullscreen(int *, int *);
+int is_glide_enabled(void);
+void glide_enabled_set(void);
+void glide_enabled_reset(void);
+
+/* mglcntx.c */
+void *mesa_prepare_window(void);
+void mesa_release_window(void);
+int mesa_gui_fullscreen(int *, int *);
+int is_mesa_enabled(void);
+void mesa_enabled_set(void);
+void mesa_enabled_reset(void);
+
 #endif
diff -Nru ../orig/qemu-2.6.2/ui/console.c ./ui/console.c
--- ../orig/qemu-2.6.2/ui/console.c	2016-09-29 12:59:49.000000000 -0700
+++ ./ui/console.c	2021-07-26 04:10:08.446661300 -0700
@@ -252,11 +252,25 @@
     ds->have_text = have_text;
 }
 
+static int glide_enabled = 0;
+int is_glide_enabled(void) { return glide_enabled; }
+void glide_enabled_set(void) { glide_enabled = 1; }
+void glide_enabled_reset(void) { glide_enabled = 0; }
+
+static int mesa_enabled = 0;
+int is_mesa_enabled(void) { return mesa_enabled; }
+void mesa_enabled_set(void) { mesa_enabled = 1; }
+void mesa_enabled_reset(void) { mesa_enabled = 0; }
+
 void graphic_hw_update(QemuConsole *con)
 {
     if (!con) {
         con = active_console;
     }
+    if (is_glide_enabled())
+        return;
+    if (is_mesa_enabled())
+        return;
     if (con && con->hw_ops->gfx_update) {
         con->hw_ops->gfx_update(con->hw);
     }
diff -Nru ../orig/qemu-2.6.2/ui/sdl.c ./ui/sdl.c
--- ../orig/qemu-2.6.2/ui/sdl.c	2016-09-29 12:59:49.000000000 -0700
+++ ./ui/sdl.c	2021-07-26 04:37:43.430251900 -0700
@@ -852,6 +852,10 @@
             break;
         case SDL_VIDEORESIZE:
             sdl_scale(ev->resize.w, ev->resize.h);
+            if ((ev->resize.w == gui_saved_width) && (ev->resize.h == gui_saved_height)) {
+                gui_saved_width = 0;
+                gui_saved_height = 0;
+            }
             graphic_hw_invalidate(NULL);
             graphic_hw_update(NULL);
             break;
@@ -922,6 +926,112 @@
     SDL_QuitSubSystem(SDL_INIT_VIDEO);
 }
 
+static void sdl_display_valid(const char *feat)
+{
+    if (!guest_screen) {
+        error_report("%s: invalid sdl display. Use -display sdl", feat);
+        exit(1);
+    }
+}
+
+void *glide_prepare_window(int w, int h)
+{
+    void *hwndSDL = NULL;
+    SDL_SysWMinfo wmi;
+
+    sdl_display_valid("glidept");
+
+    SDL_VERSION(&wmi.version);
+    if(SDL_GetWMInfo(&wmi)) {
+#if defined(SDL_VIDEO_DRIVER_WINDIB) || defined(SDL_VIDEO_DRIVER_DDRAW)
+	hwndSDL = (void *)wmi.window;
+#elif defined(SDL_VIDEO_DRIVER_X11)
+	hwndSDL = (void *)wmi.info.x11.window;
+#else
+#error Unsupported window binding
+#endif
+    }
+    gui_saved_width = real_screen->w;
+    gui_saved_height = real_screen->h;
+
+    glide_enabled_set();
+    smp_mb();
+
+    SDL_Event ev1, *ev = &ev1;
+    ev->type = SDL_VIDEORESIZE;
+    ev->resize.w = w;
+    ev->resize.h = h;
+    SDL_PushEvent(ev);
+
+    return hwndSDL;
+}
+
+void glide_release_window(void)
+{
+    glide_enabled_reset();
+    smp_mb();
+    SDL_Event ev1, *ev = &ev1;
+    ev->type = SDL_VIDEORESIZE;
+    ev->resize.w = gui_saved_width;
+    ev->resize.h = gui_saved_height;
+    SDL_PushEvent(ev);
+}
+
+int glide_window_stat(int activate)
+{
+    int scr_w, scr_h, stat;
+    scr_w = real_screen->w;
+    scr_h = real_screen->h;
+    if (activate)
+	stat = (((scr_h & 0x7FFFU) << 0x10) | scr_w);
+    else
+	stat = (((gui_saved_height & 0x7FFFU) << 0x10) | gui_saved_width)? 1:0;
+    return stat;
+}
+
+int glide_gui_fullscreen(int *width, int *height)
+{
+    sdl_display_valid("glidept");
+    if (width)
+        *width = real_screen->w;
+    if (height)
+        *height = real_screen->h;
+    return gui_fullscreen;
+}
+
+void *mesa_prepare_window(void)
+{
+    void *hwndSDL = NULL;
+    SDL_SysWMinfo wmi;
+
+    sdl_display_valid("mesapt");
+
+    SDL_VERSION(&wmi.version);
+    if(SDL_GetWMInfo(&wmi)) {
+#if defined(SDL_VIDEO_DRIVER_WINDIB) || defined(SDL_VIDEO_DRIVER_DDRAW)
+	hwndSDL = (void *)wmi.window;
+#elif defined(SDL_VIDEO_DRIVER_X11)
+	hwndSDL = (void *)wmi.info.x11.window;
+#else
+#error Unsupported window binding
+#endif
+    }
+
+    return hwndSDL;
+}
+
+void mesa_release_window(void) { }
+
+int mesa_gui_fullscreen(int *width, int *height)
+{
+    sdl_display_valid("mesapt");
+    if (width)
+        *width = real_screen->w;
+    if (height)
+        *height = real_screen->h;
+    return gui_fullscreen;
+}
+
 static const DisplayChangeListenerOps dcl_ops = {
     .dpy_name             = "sdl",
     .dpy_gfx_update       = sdl_update,
diff -Nru ../orig/qemu-2.6.2/ui/sdl2.c ./ui/sdl2.c
--- ../orig/qemu-2.6.2/ui/sdl2.c	2016-09-29 12:59:49.000000000 -0700
+++ ./ui/sdl2.c	2021-07-26 04:10:08.474661400 -0700
@@ -36,6 +36,8 @@
 static SDL_Surface *guest_sprite_surface;
 static int gui_grab; /* if true, all keyboard/mouse events are grabbed */
 
+static int gui_saved_width;
+static int gui_saved_height;
 static int gui_saved_grab;
 static int gui_fullscreen;
 static int gui_noframe;
@@ -546,6 +548,14 @@
         sdl2_redraw(scon);
         break;
     case SDL_WINDOWEVENT_EXPOSED:
+	if (ev->window.data1 && ev->window.data2) {
+	    if ((ev->window.data1 == gui_saved_width) &&
+		(ev->window.data2 == gui_saved_height)) {
+		gui_saved_width = 0;
+		gui_saved_height = 0;
+	    }
+	    SDL_SetWindowSize(scon->real_window, ev->window.data1, ev->window.data2);
+	}
         sdl2_redraw(scon);
         break;
     case SDL_WINDOWEVENT_FOCUS_GAINED:
@@ -709,6 +719,117 @@
     SDL_QuitSubSystem(SDL_INIT_VIDEO);
 }
 
+static void sdl_display_valid(const char *feat)
+{
+    if (!sdl2_console) {
+        error_report("%s: invalid sdl display. Use -display sdl", feat);
+        exit(1);
+    }
+}
+
+void *glide_prepare_window(int w, int h)
+{
+    void *hwndSDL = NULL;
+    SDL_SysWMinfo wmi;
+    SDL_Event ev1, *ev = &ev1;
+    int scr_w, scr_h;
+
+    sdl_display_valid("glidept");
+
+    SDL_VERSION(&wmi.version);
+    if (SDL_GetWindowWMInfo(sdl2_console[0].real_window, &wmi)) {
+#if defined(SDL_VIDEO_DRIVER_WINDOWS)	
+	hwndSDL = (void *)wmi.info.win.window;
+#elif defined(SDL_VIDEO_DRIVER_X11)
+	hwndSDL = (void *)wmi.info.x11.window;
+#else
+#error Unsupported window binding
+#endif
+    }
+    SDL_GetWindowSize(sdl2_console[0].real_window, &scr_w, &scr_h);
+    gui_saved_width = scr_w;
+    gui_saved_height = scr_h;
+
+    glide_enabled_set();
+    smp_mb();
+
+    ev->type = SDL_WINDOWEVENT;
+    ev->window.windowID = SDL_GetWindowID(sdl2_console[0].real_window);
+    ev->window.event = SDL_WINDOWEVENT_EXPOSED;
+    ev->window.data1 = w;
+    ev->window.data2 = h;
+    SDL_PushEvent(ev);
+
+    return hwndSDL;
+}
+
+void glide_release_window(void)
+{
+    glide_enabled_reset();
+    smp_mb();
+    SDL_Event ev1, *ev = &ev1;
+    ev->type = SDL_WINDOWEVENT;
+    ev->window.windowID = SDL_GetWindowID(sdl2_console[0].real_window);
+    ev->window.event = SDL_WINDOWEVENT_EXPOSED;
+    ev->window.data1 = gui_saved_width;
+    ev->window.data2 = gui_saved_height;
+    SDL_PushEvent(ev);
+}
+
+int glide_window_stat(int activate)
+{
+    int scr_w, scr_h, stat;
+    SDL_GetWindowSize(sdl2_console[0].real_window, &scr_w, &scr_h);
+    if (activate)
+	stat = (((scr_h & 0x7FFFU) << 0x10) | scr_w);
+    else
+	stat = (((gui_saved_height & 0x7FFFU) << 0x10) | gui_saved_width)? 1:0;
+    return stat;
+}
+
+int glide_gui_fullscreen(int *width, int *height)
+{
+    sdl_display_valid("glidept");
+    if (width)
+        *width = surface_width(sdl2_console[0].surface);
+    if (height)
+        *height = surface_height(sdl2_console[0].surface);
+    return gui_fullscreen;
+}
+
+void *mesa_prepare_window(void)
+{
+    void *hwndSDL = NULL;
+    SDL_SysWMinfo wmi;
+
+    sdl_display_valid("mesapt");
+
+    SDL_VERSION(&wmi.version);
+    if (SDL_GetWindowWMInfo(sdl2_console[0].real_window, &wmi)) {
+#if defined(SDL_VIDEO_DRIVER_WINDOWS)	
+	hwndSDL = (void *)wmi.info.win.window;
+#elif defined(SDL_VIDEO_DRIVER_X11)
+	hwndSDL = (void *)wmi.info.x11.window;
+#else
+#error Unsupported window binding
+#endif
+    }
+
+    return hwndSDL;
+}
+
+void mesa_release_window(void) { }
+
+int mesa_gui_fullscreen(int *width, int *height)
+{
+    sdl_display_valid("mesapt");
+    if (width)
+        *width = surface_width(sdl2_console[0].surface);
+    if (height)
+        *height = surface_height(sdl2_console[0].surface);
+    return gui_fullscreen;
+}
+
 static const DisplayChangeListenerOps dcl_2d_ops = {
     .dpy_name             = "sdl2-2d",
     .dpy_gfx_update       = sdl2_2d_update,
diff -Nru ../orig/qemu-2.6.2/vl.c ./vl.c
--- ../orig/qemu-2.6.2/vl.c	2016-09-29 12:59:49.000000000 -0700
+++ ./vl.c	2021-07-26 04:35:11.178553700 -0700
@@ -1943,6 +1943,13 @@
     } while (!main_loop_should_exit());
 }
 
+static void feature(void)
+{
+    const char rev_[ALIGNED(1)]
+        ;
+    printf("  featuring qemu-3dfx@%s"__TIME__" "__DATE__" build\n", rev_);
+}
+
 static void version(void)
 {
     printf("QEMU emulator version " QEMU_VERSION QEMU_PKGVERSION ", Copyright (c) 2003-2008 Fabrice Bellard\n");
@@ -3338,6 +3345,7 @@
                 break;
             case QEMU_OPTION_version:
                 version();
+                feature();
                 exit(0);
                 break;
             case QEMU_OPTION_m:

diff -Nru ../orig/qemu-4.1.1/accel/kvm/kvm-all.c ./accel/kvm/kvm-all.c
--- ../orig/qemu-4.1.1/accel/kvm/kvm-all.c	2019-11-14 10:06:20.000000000 -0800
+++ ./accel/kvm/kvm-all.c	2021-08-02 15:25:09.025988600 -0700
@@ -1023,6 +1023,41 @@
     kvm_slots_unlock(kml);
 }

+void kvm_update_guest_pa_range(uint64_t start_pa, uint64_t size, void *host_va, int readonly, int add)
+{
+    KVMState *s = kvm_state;
+    KVMMemoryListener *kml = &s->memory_listener;
+
+    MemoryRegion mr;
+    MemoryRegionSection section;
+    RAMBlock ram_block;
+
+    memset(&ram_block, 0, sizeof(RAMBlock));
+    ram_block.mr = &mr;
+    ram_block.used_length = HOST_PAGE_ALIGN(size);
+    ram_block.max_length = HOST_PAGE_ALIGN(size);
+    ram_block.fd = -1;
+    ram_block.page_size = getpagesize();
+    ram_block.host = host_va;
+    ram_block.flags |= RAM_PREALLOC;
+
+    memory_region_init(&mr, NULL, NULL, HOST_PAGE_ALIGN(size));
+    mr.ram = true;
+    mr.ram_block = &ram_block;
+    mr.readonly = readonly;
+    mr.nonvolatile = false;
+
+    section.mr = &mr;
+    section.fv = 0;
+    section.offset_within_region = 0;
+    section.size = mr.size;
+    section.offset_within_address_space = start_pa;
+    section.readonly = mr.readonly;
+    section.nonvolatile = mr.nonvolatile;
+
+    kvm_set_phys_mem(kml, &section, add);
+}
+
 static void kvm_region_add(MemoryListener *listener,
                            MemoryRegionSection *section)
 {
diff -Nru ../orig/qemu-4.1.1/configure ./configure
--- ../orig/qemu-4.1.1/configure	2019-11-14 10:06:20.000000000 -0800
+++ ./configure	2021-08-02 15:25:09.040991000 -0700
@@ -807,6 +807,8 @@
   else
     audio_drv_list=""
   fi
+# For MESA/Glide pass-through ##
+  LIBS="-lgdi32 $LIBS"
   supported_os="yes"
 ;;
 GNU/kFreeBSD)
@@ -903,6 +905,8 @@
   linux_user="yes"
   kvm="yes"
   QEMU_INCLUDES="-I\$(SRC_PATH)/linux-headers -I$PWD/linux-headers $QEMU_INCLUDES"
+# For MESA/Glide pass-through ##
+  LIBS="-ldl -lXxf86vm -lGL $LIBS"
   supported_os="yes"
   libudev="yes"
 ;;
diff -Nru ../orig/qemu-4.1.1/hw/Makefile.objs ./hw/Makefile.objs
--- ../orig/qemu-4.1.1/hw/Makefile.objs	2019-11-14 10:06:20.000000000 -0800
+++ ./hw/Makefile.objs	2021-08-02 15:26:38.262161000 -0700
@@ -9,6 +9,7 @@
 devices-dirs-y += char/
 devices-dirs-y += cpu/
 devices-dirs-y += display/
+devices-dirs-y += 3dfx/
 devices-dirs-y += dma/
 devices-dirs-y += gpio/
 devices-dirs-$(CONFIG_HYPERV) += hyperv/
@@ -19,6 +20,7 @@
 devices-dirs-$(CONFIG_IPACK) += ipack/
 devices-dirs-$(CONFIG_IPMI) += ipmi/
 devices-dirs-y += isa/
+devices-dirs-y += mesa/
 devices-dirs-y += misc/
 devices-dirs-y += net/
 devices-dirs-y += rdma/
diff -Nru ../orig/qemu-4.1.1/hw/i386/pc.c ./hw/i386/pc.c
--- ../orig/qemu-4.1.1/hw/i386/pc.c	2019-11-14 10:06:20.000000000 -0800
+++ ./hw/i386/pc.c	2021-08-02 15:25:09.062995500 -0700
@@ -2113,6 +2113,28 @@
 
     /* Super I/O */
     pc_superio_init(isa_bus, create_fdctrl, no_vmport);
+    /* Glide pass-through */
+    glidept_mm_init();
+    /* MESA pass-through */
+    mesapt_mm_init();
+}
+
+void glidept_mm_init(void)
+{
+    DeviceState *glidept_dev = NULL;
+
+    glidept_dev = qdev_new(TYPE_GLIDEPT);
+    sysbus_realize(SYS_BUS_DEVICE(glidept_dev), &error_fatal);
+    sysbus_mmio_map(SYS_BUS_DEVICE(glidept_dev), 0, GLIDEPT_MM_BASE);
+}
+
+void mesapt_mm_init(void)
+{
+    DeviceState *mesapt_dev = NULL;
+
+    mesapt_dev = qdev_new(TYPE_MESAPT);
+    sysbus_realize(SYS_BUS_DEVICE(mesapt_dev), &error_fatal);
+    sysbus_mmio_map(SYS_BUS_DEVICE(mesapt_dev), 0, MESAPT_MM_BASE);
 }
 
 void pc_nic_init(PCMachineClass *pcmc, ISABus *isa_bus, PCIBus *pci_bus)
diff -Nru ../orig/qemu-4.1.1/include/hw/i386/pc.h ./include/hw/i386/pc.h
--- ../orig/qemu-4.1.1/include/hw/i386/pc.h	2019-11-14 10:06:20.000000000 -0800
+++ ./include/hw/i386/pc.h	2021-08-02 15:25:09.075992000 -0700
@@ -173,6 +173,22 @@
 
 void gsi_handler(void *opaque, int n, int level);
 
+#if (((QEMU_VERSION_MAJOR << 8) | \
+      (QEMU_VERSION_MINOR << 4) | \
+       QEMU_VERSION_MICRO) < 0x510)
+#define qdev_new(x)         qdev_create(NULL,x)
+#define sysbus_realize(x,y) qdev_init_nofail((DeviceState *)x)
+#endif
+/* GLIDE pass-through */
+#define TYPE_GLIDEPT "glidept"
+#define GLIDEPT_MM_BASE 0xfbdff000
+void glidept_mm_init(void);
+
+/* MESA pass-through */
+#define TYPE_MESAPT "mesapt"
+#define MESAPT_MM_BASE 0xefffe000
+void mesapt_mm_init(void);
+
 /* vmport.c */
 #define TYPE_VMPORT "vmport"
 typedef uint32_t (VMPortReadFunc)(void *opaque, uint32_t address);
diff -Nru ../orig/qemu-4.1.1/include/sysemu/kvm.h ./include/sysemu/kvm.h
--- ../orig/qemu-4.1.1/include/sysemu/kvm.h	2019-11-14 10:06:20.000000000 -0800
+++ ./include/sysemu/kvm.h	2021-08-02 15:25:09.087989500 -0700
@@ -475,6 +475,8 @@

 #endif /* NEED_CPU_H */

+void kvm_update_guest_pa_range(uint64_t start_pa, uint64_t size, void *host_va, int readonly, int add);
+
 void kvm_cpu_synchronize_state(CPUState *cpu);
 void kvm_cpu_synchronize_post_reset(CPUState *cpu);
 void kvm_cpu_synchronize_post_init(CPUState *cpu);
diff -Nru ../orig/qemu-4.1.1/include/sysemu/whpx.h ./include/sysemu/whpx.h
--- ../orig/qemu-4.1.1/include/sysemu/whpx.h	2019-11-14 10:06:20.000000000 -0800
+++ ./include/sysemu/whpx.h	2021-08-02 15:25:09.099990900 -0700
@@ -19,6 +19,7 @@
 void whpx_destroy_vcpu(CPUState *cpu);
 void whpx_vcpu_kick(CPUState *cpu);

+void whpx_update_guest_pa_range(uint64_t start_pa, uint64_t size, void *host_va, int readonly, int add);

 void whpx_cpu_synchronize_state(CPUState *cpu);
 void whpx_cpu_synchronize_post_reset(CPUState *cpu);
diff -Nru ../orig/qemu-4.1.1/include/ui/console.h ./include/ui/console.h
--- ../orig/qemu-4.1.1/include/ui/console.h	2019-11-14 10:06:20.000000000 -0800
+++ ./include/ui/console.h	2021-10-02 22:43:53.014920300 -0700
@@ -453,4 +453,17 @@
 /* input.c */
 int index_from_key(const char *key, size_t key_length);
 
+/* glidewnd.c */
+void glide_prepare_window(uint32_t res, void *, void *);
+void glide_release_window(void *, void *);
+int glide_window_stat(const int);
+int glide_gui_fullscreen(int *, int *);
+void glide_renderer_stat(const int);
+
+/* mglcntx.c */
+void mesa_renderer_stat(const int);
+void mesa_prepare_window(void *);
+void mesa_release_window(void);
+int mesa_gui_fullscreen(int *, int *);
+
 #endif
diff -Nru ../orig/qemu-4.1.1/target/i386/whpx-all.c ./target/i386/whpx-all.c
--- ../orig/qemu-4.1.1/target/i386/whpx-all.c	2019-11-14 10:06:21.000000000 -0800
+++ ./target/i386/whpx-all.c	2021-08-02 15:25:09.117988300 -0700
@@ -10,6 +10,7 @@

 #include "qemu/osdep.h"
 #include "cpu.h"
+#include "exec/ram_addr.h"
 #include "exec/address-spaces.h"
 #include "exec/ioport.h"
 #include "qemu-common.h"
@@ -1299,6 +1300,38 @@
                         memory_region_is_rom(mr), mr->name);
 }

+void whpx_update_guest_pa_range(uint64_t start_pa, uint64_t size, void *host_va, int readonly, int add)
+{
+    MemoryRegion mr;
+    MemoryRegionSection section;
+    RAMBlock ram_block;
+
+    memset(&ram_block, 0, sizeof(RAMBlock));
+    ram_block.mr = &mr;
+    ram_block.used_length = HOST_PAGE_ALIGN(size);
+    ram_block.max_length = HOST_PAGE_ALIGN(size);
+    ram_block.fd = -1;
+    ram_block.page_size = getpagesize();
+    ram_block.host = host_va;
+    ram_block.flags |= RAM_PREALLOC;
+
+    memory_region_init(&mr, NULL, NULL, HOST_PAGE_ALIGN(size));
+    mr.ram = true;
+    mr.ram_block = &ram_block;
+    mr.readonly = readonly;
+    mr.nonvolatile = false;
+
+    section.mr = &mr;
+    section.fv = 0;
+    section.offset_within_region = 0;
+    section.size = mr.size;
+    section.offset_within_address_space = start_pa;
+    section.readonly = mr.readonly;
+    section.nonvolatile = mr.nonvolatile;
+
+    whpx_process_section(&section, add);
+}
+
 static void whpx_region_add(MemoryListener *listener,
                            MemoryRegionSection *section)
 {
diff -Nru ../orig/qemu-4.1.1/ui/sdl2.c ./ui/sdl2.c
--- ../orig/qemu-4.1.1/ui/sdl2.c	2019-11-14 10:06:21.000000000 -0800
+++ ./ui/sdl2.c	2021-10-11 18:57:08.725884100 -0700
@@ -712,6 +712,269 @@
     SDL_QuitSubSystem(SDL_INIT_VIDEO);
 }
 
+static void sdl_display_valid(const char *feat)
+{
+    if (!sdl2_console) {
+        error_report("%s: invalid sdl display. Use -display sdl", feat);
+        exit(1);
+    }
+}
+
+static struct sdl_console_cb {
+    QEMUTimer *ts;
+    SDL_Surface *icon;
+    struct sdl2_console *scon;
+    int gui_saved_res;
+    int render_pause;
+    int res;
+    void *opaque;
+    void *hnwnd;
+    void (*cwnd_fn)(void *, void *, void *);
+} scon_cb;
+static void sdl_gui_restart(struct sdl2_console *scon, SDL_Surface *icon)
+{
+    int x, y, top;
+    gui_saved_grab = gui_grab;
+    sdl_grab_end(scon);
+    SDL_GetWindowPosition(scon->real_window, &x, &y);
+    SDL_GetWindowBordersSize(scon->real_window, &top, 0, 0, 0);
+#ifndef CONFIG_WIN32
+    y -= top;
+#endif
+    sdl2_window_destroy(scon);
+    sdl2_window_create(scon);
+    if (icon)
+        SDL_SetWindowIcon(scon->real_window, icon);
+    if (!gui_fullscreen)
+        SDL_SetWindowPosition(scon->real_window, x, y);
+    if (gui_saved_grab)
+        sdl_grab_start(scon);
+}
+static void sched_wndproc(void *opaque)
+{
+    struct sdl_console_cb *s = opaque;
+
+    if (s->res == -1) {
+        if (s->render_pause) {
+            SDL_DestroyTexture(s->scon->texture);
+            s->scon->texture = 0;
+        }
+        else {
+            gui_saved_grab = gui_grab;
+            sdl_grab_end(s->scon);
+            if (!s->scon->real_renderer)
+                s->scon->real_renderer = SDL_CreateRenderer(s->scon->real_window, -1 ,0);
+            if (!s->scon->opengl)
+                sdl2_2d_switch(&s->scon->dcl, s->scon->surface);
+            if (gui_saved_grab)
+                sdl_grab_start(s->scon);
+        }
+        return;
+    }
+
+    if (s->gui_saved_res) {
+        SDL_SetHint(SDL_HINT_RENDER_DRIVER, "opengl");
+        SDL_GL_SetAttribute(SDL_GL_BUFFER_SIZE, 32);
+        SDL_GL_SetAttribute(SDL_GL_DEPTH_SIZE,  24);
+        SDL_GL_SetAttribute(SDL_GL_STENCIL_SIZE, 8);
+        SDL_GL_SetAttribute(SDL_GL_ALPHA_SIZE, 8);
+        sdl_gui_restart(s->scon, s->icon);
+        SDL_SysWMinfo wmi;
+        SDL_VERSION(&wmi.version);
+        if (SDL_GetWindowWMInfo(s->scon->real_window, &wmi)) {
+            switch(wmi.subsystem) {
+#if defined(SDL_VIDEO_DRIVER_WINDOWS)
+                case SDL_SYSWM_WINDOWS:
+                    s->hnwnd = (void *)wmi.info.win.window;
+                    break;
+#endif
+#if defined(SDL_VIDEO_DRIVER_X11)
+                case SDL_SYSWM_X11:
+                    s->hnwnd = (void *)wmi.info.x11.window;
+                    break;
+#endif
+#if defined(SDL_VIDEO_DRIVER_COCOA)
+                case SDL_SYSWM_COCOA:
+                    s->hnwnd = (void *)wmi.info.cocoa.window;
+                    break;
+#endif
+                default:
+                    s->hnwnd = 0;
+                    break;
+            }
+        }
+        SDL_DestroyRenderer(s->scon->real_renderer);
+        s->scon->real_renderer = 0;
+        s->scon->winctx = SDL_GL_GetCurrentContext();
+        s->scon->winctx = (s->scon->winctx)? s->scon->winctx:SDL_GL_CreateContext(s->scon->real_window);
+        s->render_pause = 1;
+        if (!s->opaque)
+            s->cwnd_fn(s->scon->real_window, s->hnwnd, 0);
+    }
+    else {
+        SDL_GL_MakeCurrent(s->scon->real_window, NULL);
+        SDL_GL_DeleteContext(s->scon->winctx);
+        s->scon->winctx = 0;
+        s->render_pause = 0;
+        SDL_GL_ResetAttributes();
+        SDL_SetHint(SDL_HINT_RENDER_DRIVER, "0");
+        sdl_gui_restart(s->scon, s->icon);
+        if (!s->scon->opengl)
+            sdl2_2d_switch(&s->scon->dcl, s->scon->surface);
+        timer_del(s->ts);
+        timer_free(s->ts);
+        s->ts = 0;
+    }
+    if (s->opaque && (s->res > 0))
+        SDL_SetWindowSize(s->scon->real_window, (s->res & 0xFFFFU), (s->res >> 0x10));
+}
+
+static int sdl_gui_fullscreen(int *width, int *height, const char *feat)
+{
+    struct sdl_console_cb *s = &scon_cb;
+
+    sdl_display_valid(feat);
+    s->scon = &sdl2_console[0];
+    if (width)
+        *width = surface_width(s->scon->surface);
+    if (height)
+        *height = surface_height(s->scon->surface);
+    return gui_fullscreen;
+
+
+}
+
+static void sdl_renderer_stat(const int activate, const char *feat)
+{
+    struct sdl_console_cb *s = &scon_cb;
+
+    if (activate == s->render_pause)
+        return;
+
+    sdl_display_valid(feat);
+    s->scon = &sdl2_console[0];
+    s->res = -1;
+    s->render_pause = activate;
+
+    if (!s->ts)
+        s->ts = timer_new_ms(QEMU_CLOCK_REALTIME, &sched_wndproc, s);
+    timer_mod(s->ts, qemu_clock_get_ms(QEMU_CLOCK_REALTIME));
+}
+
+void glide_prepare_window(uint32_t res, void *opaque, void *cwnd_fn)
+{
+    int scr_w, scr_h;
+    struct sdl_console_cb *s = &scon_cb;
+
+    sdl_display_valid("glidept");
+    s->scon = &sdl2_console[0];
+    s->res = res;
+    s->opaque = opaque;
+    s->cwnd_fn = (void (*)(void *, void *, void *))cwnd_fn;
+
+    SDL_GetWindowSize(s->scon->real_window, &scr_w, &scr_h);
+    s->gui_saved_res = ((scr_h & 0x7FFFU) << 0x10) | scr_w;
+
+    if (!s->ts)
+        s->ts = timer_new_ms(QEMU_CLOCK_REALTIME, &sched_wndproc, s);
+    timer_mod(s->ts, qemu_clock_get_ms(QEMU_CLOCK_REALTIME));
+}
+
+void glide_release_window(void *opaque, void *cwnd_fn)
+{
+    struct sdl_console_cb *s = &scon_cb;
+
+    sdl_display_valid("glidept");
+    s->scon = &sdl2_console[0];
+    s->res = s->gui_saved_res;
+    s->opaque = opaque;
+    s->cwnd_fn = (void (*)(void *, void *, void *))cwnd_fn;
+    s->gui_saved_res = 0;
+
+    if (s->ts)
+        timer_mod(s->ts, qemu_clock_get_ms(QEMU_CLOCK_REALTIME));
+}
+
+int glide_window_stat(const int activate)
+{
+    int stat;
+    struct sdl_console_cb *s = &scon_cb;
+
+    if (activate) {
+        if (s->scon->winctx) {
+            int scr_w, scr_h;
+            SDL_GetWindowSize(s->scon->real_window, &scr_w, &scr_h);
+#ifdef CONFIG_DARWIN
+            if (SDL_GL_MakeCurrent(s->scon->real_window, s->scon->winctx))
+                fprintf(stderr, "%s\n", SDL_GetError());
+#endif
+            stat = ((scr_h & 0x7FFFU) << 0x10) | scr_w;
+            s->cwnd_fn(s->scon->real_window, s->hnwnd, s->opaque);
+        }
+        else
+            stat = 1;
+    }
+    else {
+        s->cwnd_fn(s->scon->real_window, s->hnwnd, s->opaque);
+	stat = (s->scon->winctx)? 1:0;
+    }
+    return stat;
+}
+
+int glide_gui_fullscreen(int *width, int *height)
+{
+    return sdl_gui_fullscreen(width, height, "glidept");
+}
+
+void glide_renderer_stat(const int activate)
+{
+    sdl_renderer_stat(activate, "glidept");
+}
+
+void mesa_renderer_stat(const int activate)
+{
+    sdl_renderer_stat(activate, "mesapt");
+}
+
+void mesa_prepare_window(void *cwnd_fn)
+{
+    int scr_w, scr_h;
+    struct sdl_console_cb *s = &scon_cb;
+
+    sdl_display_valid("mesapt");
+    s->scon = &sdl2_console[0];
+    s->res = 0;
+    s->opaque = 0;
+    s->cwnd_fn = (void (*)(void *, void *, void *))cwnd_fn;
+
+    SDL_GetWindowSize(s->scon->real_window, &scr_w, &scr_h);
+    s->gui_saved_res = ((scr_h & 0x7FFFU) << 0x10) | scr_w;
+
+    if (!s->ts)
+        s->ts = timer_new_ms(QEMU_CLOCK_REALTIME, &sched_wndproc, s);
+    timer_mod(s->ts, qemu_clock_get_ms(QEMU_CLOCK_REALTIME));
+}
+
+void mesa_release_window(void)
+{
+    struct sdl_console_cb *s = &scon_cb;
+
+    sdl_display_valid("mesapt");
+    s->scon = &sdl2_console[0];
+    s->res = 0;
+    s->opaque = 0;
+    s->cwnd_fn = 0;
+    s->gui_saved_res = 0;
+
+    if (s->ts)
+        timer_mod(s->ts, qemu_clock_get_ms(QEMU_CLOCK_REALTIME));
+}
+
+int mesa_gui_fullscreen(int *width, int *height)
+{
+    return sdl_gui_fullscreen(width, height, "mesapt");
+}
+
 static const DisplayChangeListenerOps dcl_2d_ops = {
     .dpy_name             = "sdl2-2d",
     .dpy_gfx_update       = sdl2_2d_update,
@@ -842,6 +1105,7 @@
 #endif
     if (icon) {
         SDL_SetWindowIcon(sdl2_console[0].real_window, icon);
+        scon_cb.icon = icon;
     }

     gui_grab = 0;
diff -Nru ../orig/qemu-4.1.1/vl.c ./vl.c
--- ../orig/qemu-4.1.1/vl.c	2019-11-14 10:06:21.000000000 -0800
+++ ./vl.c	2021-08-02 15:25:09.167988700 -0700
@@ -1795,6 +1795,13 @@
     }
 }

+static void feature(void)
+{
+    const char rev_[ALIGNED(1)]
+        ;
+    printf("  featuring qemu-3dfx@%s"__TIME__" "__DATE__" build\n", rev_);
+}
+
 static void version(void)
 {
     printf("QEMU emulator version " QEMU_FULL_VERSION "\n"
@@ -3171,6 +3178,7 @@
                 break;
             case QEMU_OPTION_version:
                 version();
+                feature();
                 exit(0);
                 break;
             case QEMU_OPTION_m:

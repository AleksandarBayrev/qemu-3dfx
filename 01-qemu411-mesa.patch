diff -ru ../orig/qemu-4.1.1/configure ./configure
--- ../orig/qemu-4.1.1/configure	2019-11-14 10:06:20.000000000 -0800
+++ ./configure	2020-03-27 18:25:08.538644217 -0700
@@ -871,6 +871,8 @@
   # won't work when we're compiling with gcc as a C compiler.
   QEMU_CFLAGS="-DOS_OBJECT_USE_OBJC=0 $QEMU_CFLAGS"
   HOST_VARIANT_DIR="darwin"
+# For MESA pass-through ##
+  LIBS="-ldl -lGLX $LIBS"
   supported_os="yes"
 ;;
 SunOS)
@@ -903,6 +905,8 @@
   linux_user="yes"
   kvm="yes"
   QEMU_INCLUDES="-I\$(SRC_PATH)/linux-headers -I$PWD/linux-headers $QEMU_INCLUDES"
+# For MESA pass-through ##
+  LIBS="-ldl -lGLX $LIBS"
   supported_os="yes"
   libudev="yes"
 ;;
diff -ru ../orig/qemu-4.1.1/hw/i386/pc.c ./hw/i386/pc.c
--- ../orig/qemu-4.1.1/hw/i386/pc.c	2019-11-14 10:06:20.000000000 -0800
+++ ./hw/i386/pc.c	2020-03-27 18:25:08.538644217 -0700
@@ -2155,6 +2155,16 @@
     for (i = 0; i < IOAPIC_NUM_PINS; i++) {
         gsi_state->ioapic_irq[i] = qdev_get_gpio_in(dev, i);
     }
+    mesapt_mm_init();
+}
+
+void mesapt_mm_init(void)
+{
+    DeviceState *mesapt_dev = NULL;
+
+    mesapt_dev = qdev_create(NULL, TYPE_MESAPT);
+    qdev_init_nofail(mesapt_dev);
+    sysbus_mmio_map(SYS_BUS_DEVICE(mesapt_dev), 0, MESAPT_MM_BASE);
 }
 
 static void pc_memory_pre_plug(HotplugHandler *hotplug_dev, DeviceState *dev,
diff -ru ../orig/qemu-4.1.1/hw/Makefile.objs ./hw/Makefile.objs
--- ../orig/qemu-4.1.1/hw/Makefile.objs	2019-11-14 10:06:20.000000000 -0800
+++ ./hw/Makefile.objs	2020-03-27 18:25:08.548644208 -0700
@@ -19,6 +19,7 @@
 devices-dirs-$(CONFIG_IPACK) += ipack/
 devices-dirs-$(CONFIG_IPMI) += ipmi/
 devices-dirs-y += isa/
+devices-dirs-y += mesa/
 devices-dirs-y += misc/
 devices-dirs-y += net/
 devices-dirs-y += rdma/
Only in ./hw: mesa
diff -ru ../orig/qemu-4.1.1/include/hw/i386/pc.h ./include/hw/i386/pc.h
--- ../orig/qemu-4.1.1/include/hw/i386/pc.h	2019-11-14 10:06:20.000000000 -0800
+++ ./include/hw/i386/pc.h	2020-03-27 18:25:08.548644208 -0700
@@ -173,6 +173,11 @@
 
 void gsi_handler(void *opaque, int n, int level);
 
+/* MESA pass-through */
+#define TYPE_MESAPT "mesapt"
+#define MESAPT_MM_BASE 0xefffe000
+void mesapt_mm_init(void);
+
 /* vmport.c */
 #define TYPE_VMPORT "vmport"
 typedef uint32_t (VMPortReadFunc)(void *opaque, uint32_t address);
diff -ru ../orig/qemu-4.1.1/include/ui/console.h ./include/ui/console.h
--- ../orig/qemu-4.1.1/include/ui/console.h	2019-11-14 10:06:20.000000000 -0800
+++ ./include/ui/console.h	2020-03-27 18:25:08.548644208 -0700
@@ -453,4 +453,11 @@
 /* input.c */
 int index_from_key(const char *key, size_t key_length);
 
+/* mglcntx.c */
+uintptr_t mesa_prepare_window(void);
+void mesa_release_window(void);
+int is_mesa_enabled(void);
+void mesa_enabled_set(void);
+void mesa_enabled_reset(void);
+
 #endif
diff -ru ../orig/qemu-4.1.1/ui/console.c ./ui/console.c
--- ../orig/qemu-4.1.1/ui/console.c	2019-11-14 10:06:21.000000000 -0800
+++ ./ui/console.c	2020-03-27 18:25:08.551977539 -0700
@@ -259,8 +259,15 @@
     ds->have_text = have_text;
 }
 
+static int mesa_enabled = 0;
+int is_mesa_enabled(void) { return mesa_enabled; }
+void mesa_enabled_set(void) { mesa_enabled = 1; }
+void mesa_enabled_reset(void) { mesa_enabled = 0; }
+
 void graphic_hw_update(QemuConsole *con)
 {
+    if (is_mesa_enabled())
+        return;
     if (!con) {
         con = active_console;
     }
diff -ru ../orig/qemu-4.1.1/ui/sdl2-2d.c ./ui/sdl2-2d.c
--- ../orig/qemu-4.1.1/ui/sdl2-2d.c	2019-11-14 10:06:21.000000000 -0800
+++ ./ui/sdl2-2d.c	2020-03-27 18:25:08.875310581 -0700
@@ -38,6 +38,9 @@
     size_t surface_data_offset;
     assert(!scon->opengl);
 
+    if (is_mesa_enabled())
+        return;
+
     if (!surf) {
         return;
     }
diff -ru ../orig/qemu-4.1.1/ui/sdl2.c ./ui/sdl2.c
--- ../orig/qemu-4.1.1/ui/sdl2.c	2019-11-14 10:06:21.000000000 -0800
+++ ./ui/sdl2.c	2020-03-27 18:35:11.508101544 -0700
@@ -712,6 +712,28 @@
     SDL_QuitSubSystem(SDL_INIT_VIDEO);
 }
 
+uintptr_t mesa_prepare_window(void)
+{
+    uintptr_t hwndSDL = 0;
+    SDL_SysWMinfo wmi;
+    
+    if (!sdl2_console)
+        return hwndSDL;
+
+    SDL_VERSION(&wmi.version);
+    if (SDL_GetWindowWMInfo(sdl2_console[0].real_window, &wmi)) {
+#if defined(SDL_VIDEO_DRIVER_WINDOWS)	
+	hwndSDL = (uintptr_t)wmi.info.win.window;
+#elif defined(SDL_VIDEO_DRIVER_X11)
+	hwndSDL = (uintptr_t)wmi.info.x11.window;
+#endif
+    }
+
+    return hwndSDL;
+}
+
+void mesa_release_window(void) { }
+
 static const DisplayChangeListenerOps dcl_2d_ops = {
     .dpy_name             = "sdl2-2d",
     .dpy_gfx_update       = sdl2_2d_update,

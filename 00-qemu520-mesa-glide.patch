diff -Nru ../orig/qemu-5.2.0/accel/kvm/kvm-all.c ./accel/kvm/kvm-all.c
--- ../orig/qemu-5.2.0/accel/kvm/kvm-all.c	2020-12-08 08:59:44.000000000 -0800
+++ ./accel/kvm/kvm-all.c	2021-08-02 15:00:59.892830900 -0700
@@ -1216,6 +1216,41 @@
     kvm_slots_unlock(kml);
 }

+void kvm_update_guest_pa_range(uint64_t start_pa, uint64_t size, void *host_va, int readonly, int add)
+{
+    KVMState *s = kvm_state;
+    KVMMemoryListener *kml = &s->memory_listener;
+
+    MemoryRegion mr;
+    MemoryRegionSection section;
+    RAMBlock ram_block;
+
+    memset(&ram_block, 0, sizeof(RAMBlock));
+    ram_block.mr = &mr;
+    ram_block.used_length = HOST_PAGE_ALIGN(size);
+    ram_block.max_length = HOST_PAGE_ALIGN(size);
+    ram_block.fd = -1;
+    ram_block.page_size = getpagesize();
+    ram_block.host = host_va;
+    ram_block.flags |= RAM_PREALLOC;
+
+    memory_region_init(&mr, NULL, NULL, HOST_PAGE_ALIGN(size));
+    mr.ram = true;
+    mr.ram_block = &ram_block;
+    mr.readonly = readonly;
+    mr.nonvolatile = false;
+
+    section.mr = &mr;
+    section.fv = 0;
+    section.offset_within_region = 0;
+    section.size = mr.size;
+    section.offset_within_address_space = start_pa;
+    section.readonly = mr.readonly;
+    section.nonvolatile = mr.nonvolatile;
+
+    kvm_set_phys_mem(kml, &section, add);
+}
+
 static void kvm_region_add(MemoryListener *listener,
                            MemoryRegionSection *section)
 {
diff -Nru ../orig/qemu-5.2.0/hw/i386/pc.c ./hw/i386/pc.c
--- ../orig/qemu-5.2.0/hw/i386/pc.c	2020-12-08 08:59:44.000000000 -0800
+++ ./hw/i386/pc.c	2021-08-02 15:00:59.905830500 -0700
@@ -1190,6 +1190,28 @@
 
     /* Super I/O */
     pc_superio_init(isa_bus, create_fdctrl, pcms->vmport != ON_OFF_AUTO_ON);
+    /* Glide pass-through */
+    glidept_mm_init();
+    /* MESA pass-through */
+    mesapt_mm_init();
+}
+
+void glidept_mm_init(void)
+{
+    DeviceState *glidept_dev = NULL;
+
+    glidept_dev = qdev_new(TYPE_GLIDEPT);
+    sysbus_realize(SYS_BUS_DEVICE(glidept_dev), &error_fatal);
+    sysbus_mmio_map(SYS_BUS_DEVICE(glidept_dev), 0, GLIDEPT_MM_BASE);
+}
+
+void mesapt_mm_init(void)
+{
+    DeviceState *mesapt_dev = NULL;
+
+    mesapt_dev = qdev_new(TYPE_MESAPT);
+    sysbus_realize(SYS_BUS_DEVICE(mesapt_dev), &error_fatal);
+    sysbus_mmio_map(SYS_BUS_DEVICE(mesapt_dev), 0, MESAPT_MM_BASE);
 }
 
 void pc_nic_init(PCMachineClass *pcmc, ISABus *isa_bus, PCIBus *pci_bus)
diff -Nru ../orig/qemu-5.2.0/hw/meson.build ./hw/meson.build
--- ../orig/qemu-5.2.0/hw/meson.build	2020-12-08 08:59:44.000000000 -0800
+++ ./hw/meson.build	2021-08-02 15:00:59.917829800 -0700
@@ -42,6 +42,9 @@
 subdir('xen')
 subdir('xenpv')

+subdir('3dfx')
+subdir('mesa')
+
 subdir('alpha')
 subdir('arm')
 subdir('avr')
diff -Nru ../orig/qemu-5.2.0/include/hw/i386/pc.h ./include/hw/i386/pc.h
--- ../orig/qemu-5.2.0/include/hw/i386/pc.h	2020-12-08 08:59:44.000000000 -0800
+++ ./include/hw/i386/pc.h	2021-08-02 15:00:59.923829900 -0700
@@ -182,6 +182,22 @@
 
 #define TYPE_PORT92 "port92"
 
+#if (((QEMU_VERSION_MAJOR << 8) | \
+      (QEMU_VERSION_MINOR << 4) | \
+       QEMU_VERSION_MICRO) < 0x510)
+#define qdev_new(x)         qdev_create(NULL,x)
+#define sysbus_realize(x,y) qdev_init_nofail((DeviceState *)x)
+#endif
+/* GLIDE pass-through */
+#define TYPE_GLIDEPT "glidept"
+#define GLIDEPT_MM_BASE 0xfbdff000
+void glidept_mm_init(void);
+
+/* MESA pass-through */
+#define TYPE_MESAPT "mesapt"
+#define MESAPT_MM_BASE 0xefffe000
+void mesapt_mm_init(void);
+
 /* pc_sysfw.c */
 void pc_system_flash_create(PCMachineState *pcms);
 void pc_system_flash_cleanup_unused(PCMachineState *pcms);
diff -Nru ../orig/qemu-5.2.0/include/sysemu/kvm.h ./include/sysemu/kvm.h
--- ../orig/qemu-5.2.0/include/sysemu/kvm.h	2020-12-08 08:59:44.000000000 -0800
+++ ./include/sysemu/kvm.h	2021-08-02 15:00:59.934830200 -0700
@@ -480,6 +480,8 @@
 
 #endif /* NEED_CPU_H */
 
+void kvm_update_guest_pa_range(uint64_t start_pa, uint64_t size, void *host_va, int readonly, int add);
+
 void kvm_cpu_synchronize_state(CPUState *cpu);
 
 void kvm_init_cpu_signals(CPUState *cpu);
diff -Nru ../orig/qemu-5.2.0/include/sysemu/whpx.h ./include/sysemu/whpx.h
--- ../orig/qemu-5.2.0/include/sysemu/whpx.h	2020-12-08 08:59:44.000000000 -0800
+++ ./include/sysemu/whpx.h	2021-08-02 15:00:59.946832100 -0700
@@ -15,6 +15,8 @@

 #ifdef CONFIG_WHPX

+void whpx_update_guest_pa_range(uint64_t start_pa, uint64_t size, void *host_va, int readonly, int add);
+
 int whpx_enabled(void);

 #else /* CONFIG_WHPX */
diff -Nru ../orig/qemu-5.2.0/include/ui/console.h ./include/ui/console.h
--- ../orig/qemu-5.2.0/include/ui/console.h	2020-12-08 08:59:44.000000000 -0800
+++ ./include/ui/console.h	2021-08-02 15:00:59.952831700 -0700
@@ -446,4 +446,21 @@
 /* input.c */
 int index_from_key(const char *key, size_t key_length);
 
+/* glidewnd.c */
+void *glide_prepare_window(int, int);
+void glide_release_window(void);
+int glide_window_stat(int);
+int glide_gui_fullscreen(int *, int *);
+int is_glide_enabled(void);
+void glide_enabled_set(void);
+void glide_enabled_reset(void);
+
+/* mglcntx.c */
+void *mesa_prepare_window(void);
+void mesa_release_window(void);
+int mesa_gui_fullscreen(int *, int *);
+int is_mesa_enabled(void);
+void mesa_enabled_set(void);
+void mesa_enabled_reset(void);
+
 #endif
diff -Nru ../orig/qemu-5.2.0/meson.build ./meson.build
--- ../orig/qemu-5.2.0/meson.build	2020-12-08 08:59:44.000000000 -0800
+++ ./meson.build	2021-08-02 15:00:59.964830800 -0700
@@ -1740,6 +1740,11 @@
   target_inc = [include_directories('target' / config_target['TARGET_BASE_ARCH'])]
   if targetos == 'linux'
     target_inc += include_directories('linux-headers', is_system: true)
+    link_args += ['-ldl', '-lX11', '-lXxf86vm', '-lGL']
+  endif
+  if targetos == 'darwin'
+    c_args += ['-I/opt/X11/include']
+    link_args += ['-L/opt/X11/lib', '-lX11', '-lXxf86vm', '-lGL', '-Wl,-framework,OpenGL']
   endif
   if target.endswith('-softmmu')
     qemu_target_name = 'qemu-system-' + target_name
diff -Nru ../orig/qemu-5.2.0/softmmu/vl.c ./softmmu/vl.c
--- ../orig/qemu-5.2.0/softmmu/vl.c	2020-12-08 08:59:44.000000000 -0800
+++ ./softmmu/vl.c	2021-08-02 15:00:59.989830200 -0700
@@ -1682,6 +1682,13 @@
     }
 }

+static void feature(void)
+{
+    const char rev_[ALIGNED(1)]
+        ;
+    printf("  featuring qemu-3dfx@%s"__TIME__" "__DATE__" build\n", rev_);
+}
+
 static void version(void)
 {
     printf("QEMU emulator version " QEMU_FULL_VERSION "\n"
@@ -3182,6 +3189,7 @@
                 break;
             case QEMU_OPTION_version:
                 version();
+                feature();
                 exit(0);
                 break;
             case QEMU_OPTION_m:
diff -Nru ../orig/qemu-5.2.0/target/i386/whpx-all.c ./target/i386/whpx-all.c
--- ../orig/qemu-5.2.0/target/i386/whpx-all.c	2020-12-08 08:59:44.000000000 -0800
+++ ./target/i386/whpx-all.c	2021-08-02 15:01:00.004833500 -0700
@@ -10,6 +10,7 @@

 #include "qemu/osdep.h"
 #include "cpu.h"
+#include "exec/ram_addr.h"
 #include "exec/address-spaces.h"
 #include "exec/ioport.h"
 #include "qemu-common.h"
@@ -1440,6 +1441,38 @@
                         memory_region_is_rom(mr), mr->name);
 }

+void whpx_update_guest_pa_range(uint64_t start_pa, uint64_t size, void *host_va, int readonly, int add)
+{
+    MemoryRegion mr;
+    MemoryRegionSection section;
+    RAMBlock ram_block;
+
+    memset(&ram_block, 0, sizeof(RAMBlock));
+    ram_block.mr = &mr;
+    ram_block.used_length = HOST_PAGE_ALIGN(size);
+    ram_block.max_length = HOST_PAGE_ALIGN(size);
+    ram_block.fd = -1;
+    ram_block.page_size = getpagesize();
+    ram_block.host = host_va;
+    ram_block.flags |= RAM_PREALLOC;
+
+    memory_region_init(&mr, NULL, NULL, HOST_PAGE_ALIGN(size));
+    mr.ram = true;
+    mr.ram_block = &ram_block;
+    mr.readonly = readonly;
+    mr.nonvolatile = false;
+
+    section.mr = &mr;
+    section.fv = 0;
+    section.offset_within_region = 0;
+    section.size = mr.size;
+    section.offset_within_address_space = start_pa;
+    section.readonly = mr.readonly;
+    section.nonvolatile = mr.nonvolatile;
+
+    whpx_process_section(&section, add);
+}
+
 static void whpx_region_add(MemoryListener *listener,
                            MemoryRegionSection *section)
 {
diff -Nru ../orig/qemu-5.2.0/ui/console.c ./ui/console.c
--- ../orig/qemu-5.2.0/ui/console.c	2020-12-08 08:59:44.000000000 -0800
+++ ./ui/console.c	2021-08-02 15:01:00.021832100 -0700
@@ -262,6 +262,16 @@
     ds->have_text = have_text;
 }
 
+static int glide_enabled = 0;
+int is_glide_enabled(void) { return glide_enabled; }
+void glide_enabled_set(void) { glide_enabled = 1; }
+void glide_enabled_reset(void) { glide_enabled = 0; }
+
+static int mesa_enabled = 0;
+int is_mesa_enabled(void) { return mesa_enabled; }
+void mesa_enabled_set(void) { mesa_enabled = 1; }
+void mesa_enabled_reset(void) { mesa_enabled = 0; }
+
 void graphic_hw_update_done(QemuConsole *con)
 {
     if (con) {
@@ -277,6 +287,8 @@
         return;
     }
     if (con->hw_ops->gfx_update) {
+        if (is_glide_enabled() || is_mesa_enabled()) { }
+        else
         con->hw_ops->gfx_update(con->hw);
         async = con->hw_ops->gfx_update_async;
     }
diff -Nru ../orig/qemu-5.2.0/ui/sdl2.c ./ui/sdl2.c
--- ../orig/qemu-5.2.0/ui/sdl2.c	2020-12-08 08:59:44.000000000 -0800
+++ ./ui/sdl2.c	2021-08-02 15:01:00.037832300 -0700
@@ -39,6 +39,8 @@
 static SDL_Surface *guest_sprite_surface;
 static int gui_grab; /* if true, all keyboard/mouse events are grabbed */
 
+static int gui_saved_width;
+static int gui_saved_height;
 static int gui_saved_grab;
 static int gui_fullscreen;
 static int gui_grab_code = KMOD_LALT | KMOD_LCTRL;
@@ -386,6 +388,8 @@
             }
             break;
         case SDL_SCANCODE_F:
+            if (is_glide_enabled() || is_mesa_enabled())
+                break;
             toggle_full_screen(scon);
             gui_keysym = 1;
             break;
@@ -563,6 +567,14 @@
         sdl2_redraw(scon);
         break;
     case SDL_WINDOWEVENT_EXPOSED:
+	if (ev->window.data1 && ev->window.data2) {
+	    if ((ev->window.data1 == gui_saved_width) &&
+		(ev->window.data2 == gui_saved_height)) {
+		gui_saved_width = 0;
+		gui_saved_height = 0;
+	    }
+	    SDL_SetWindowSize(scon->real_window, ev->window.data1, ev->window.data2);
+	}
         sdl2_redraw(scon);
         break;
     case SDL_WINDOWEVENT_FOCUS_GAINED:
@@ -755,6 +767,117 @@
     SDL_QuitSubSystem(SDL_INIT_VIDEO);
 }
 
+static void sdl_display_valid(const char *feat)
+{
+    if (!sdl2_console) {
+        error_report("%s: invalid sdl display. Use -display sdl", feat);
+        exit(1);
+    }
+}
+
+void *glide_prepare_window(int w, int h)
+{
+    void *hwndSDL = NULL;
+    SDL_SysWMinfo wmi;
+    SDL_Event ev1, *ev = &ev1;
+    int scr_w, scr_h;
+
+    sdl_display_valid("glidept");
+
+    SDL_VERSION(&wmi.version);
+    if (SDL_GetWindowWMInfo(sdl2_console[0].real_window, &wmi)) {
+#if defined(SDL_VIDEO_DRIVER_WINDOWS)	
+	hwndSDL = (void *)wmi.info.win.window;
+#elif defined(SDL_VIDEO_DRIVER_X11)
+	hwndSDL = (void *)wmi.info.x11.window;
+#else
+#error Unsupported window binding
+#endif
+    }
+    SDL_GetWindowSize(sdl2_console[0].real_window, &scr_w, &scr_h);
+    gui_saved_width = scr_w;
+    gui_saved_height = scr_h;
+
+    glide_enabled_set();
+    smp_mb();
+
+    ev->type = SDL_WINDOWEVENT;
+    ev->window.windowID = SDL_GetWindowID(sdl2_console[0].real_window);
+    ev->window.event = SDL_WINDOWEVENT_EXPOSED;
+    ev->window.data1 = w;
+    ev->window.data2 = h;
+    SDL_PushEvent(ev);
+
+    return hwndSDL;
+}
+
+void glide_release_window(void)
+{
+    glide_enabled_reset();
+    smp_mb();
+    SDL_Event ev1, *ev = &ev1;
+    ev->type = SDL_WINDOWEVENT;
+    ev->window.windowID = SDL_GetWindowID(sdl2_console[0].real_window);
+    ev->window.event = SDL_WINDOWEVENT_EXPOSED;
+    ev->window.data1 = gui_saved_width;
+    ev->window.data2 = gui_saved_height;
+    SDL_PushEvent(ev);
+}
+
+int glide_window_stat(int activate)
+{
+    int scr_w, scr_h, stat;
+    SDL_GetWindowSize(sdl2_console[0].real_window, &scr_w, &scr_h);
+    if (activate)
+	stat = (((scr_h & 0x7FFFU) << 0x10) | scr_w);
+    else
+	stat = (((gui_saved_height & 0x7FFFU) << 0x10) | gui_saved_width)? 1:0;
+    return stat;
+}
+
+int glide_gui_fullscreen(int *width, int *height)
+{
+    sdl_display_valid("glidept");
+    if (width)
+        *width = surface_width(sdl2_console[0].surface);
+    if (height)
+        *height = surface_height(sdl2_console[0].surface);
+    return gui_fullscreen;
+}
+
+void *mesa_prepare_window(void)
+{
+    void *hwndSDL = NULL;
+    SDL_SysWMinfo wmi;
+
+    sdl_display_valid("mesapt");
+
+    SDL_VERSION(&wmi.version);
+    if (SDL_GetWindowWMInfo(sdl2_console[0].real_window, &wmi)) {
+#if defined(SDL_VIDEO_DRIVER_WINDOWS)	
+	hwndSDL = (void *)wmi.info.win.window;
+#elif defined(SDL_VIDEO_DRIVER_X11)
+	hwndSDL = (void *)wmi.info.x11.window;
+#else
+#error Unsupported window binding
+#endif
+    }
+
+    return hwndSDL;
+}
+
+void mesa_release_window(void) { }
+
+int mesa_gui_fullscreen(int *width, int *height)
+{
+    sdl_display_valid("mesapt");
+    if (width)
+        *width = surface_width(sdl2_console[0].surface);
+    if (height)
+        *height = surface_height(sdl2_console[0].surface);
+    return gui_fullscreen;
+}
+
 static const DisplayChangeListenerOps dcl_2d_ops = {
     .dpy_name             = "sdl2-2d",
     .dpy_gfx_update       = sdl2_2d_update,

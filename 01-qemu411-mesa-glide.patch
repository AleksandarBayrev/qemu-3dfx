diff -Nru ../../../scratch/qemu/orig/qemu-4.1.1/accel/kvm/kvm-all.c ./accel/kvm/kvm-all.c
--- ../../../scratch/qemu/orig/qemu-4.1.1/accel/kvm/kvm-all.c	2019-11-14 10:06:20.000000000 -0800
+++ ./accel/kvm/kvm-all.c	2021-03-28 15:36:52.664979500 -0700
@@ -1023,6 +1023,41 @@
     kvm_slots_unlock(kml);
 }

+void kvm_update_guest_pa_range(uint64_t start_pa, uint64_t size, void *host_va, int readonly, int add)
+{
+    KVMState *s = kvm_state;
+    KVMMemoryListener *kml = &s->memory_listener;
+
+    MemoryRegion mr;
+    MemoryRegionSection section;
+    RAMBlock ram_block;
+
+    memset(&ram_block, 0, sizeof(RAMBlock));
+    ram_block.mr = &mr;
+    ram_block.used_length = HOST_PAGE_ALIGN(size);
+    ram_block.max_length = HOST_PAGE_ALIGN(size);
+    ram_block.fd = -1;
+    ram_block.page_size = getpagesize();
+    ram_block.host = host_va;
+    ram_block.flags |= RAM_PREALLOC;
+
+    memory_region_init(&mr, NULL, NULL, HOST_PAGE_ALIGN(size));
+    mr.ram = true;
+    mr.ram_block = &ram_block;
+    mr.readonly = readonly;
+    mr.nonvolatile = false;
+
+    section.mr = &mr;
+    section.fv = 0;
+    section.offset_within_region = 0;
+    section.size = mr.size;
+    section.offset_within_address_space = start_pa;
+    section.readonly = mr.readonly;
+    section.nonvolatile = mr.nonvolatile;
+
+    kvm_set_phys_mem(kml, &section, add);
+}
+
 static void kvm_region_add(MemoryListener *listener,
                            MemoryRegionSection *section)
 {
diff -Nru ../../../scratch/qemu/orig/qemu-4.1.1/configure ./configure
--- ../../../scratch/qemu/orig/qemu-4.1.1/configure	2019-11-14 10:06:20.000000000 -0800
+++ ./configure	2021-03-28 15:31:57.225391600 -0700
@@ -903,6 +903,8 @@
   linux_user="yes"
   kvm="yes"
   QEMU_INCLUDES="-I\$(SRC_PATH)/linux-headers -I$PWD/linux-headers $QEMU_INCLUDES"
+# For MESA/Glide pass-through ##
+  LIBS="-ldl -lXxf86vm -lGLX $LIBS"
   supported_os="yes"
   libudev="yes"
 ;;
diff -Nru ../../../scratch/qemu/orig/qemu-4.1.1/hw/Makefile.objs ./hw/Makefile.objs
--- ../../../scratch/qemu/orig/qemu-4.1.1/hw/Makefile.objs	2019-11-14 10:06:20.000000000 -0800
+++ ./hw/Makefile.objs	2021-03-28 15:31:57.240394200 -0700
@@ -9,6 +9,7 @@
 devices-dirs-y += char/
 devices-dirs-y += cpu/
 devices-dirs-y += display/
+devices-dirs-y += 3dfx/
 devices-dirs-y += dma/
 devices-dirs-y += gpio/
 devices-dirs-$(CONFIG_HYPERV) += hyperv/
@@ -19,6 +20,7 @@
 devices-dirs-$(CONFIG_IPACK) += ipack/
 devices-dirs-$(CONFIG_IPMI) += ipmi/
 devices-dirs-y += isa/
+devices-dirs-y += mesa/
 devices-dirs-y += misc/
 devices-dirs-y += net/
 devices-dirs-y += rdma/
diff -Nru ../../../scratch/qemu/orig/qemu-4.1.1/hw/i386/pc.c ./hw/i386/pc.c
--- ../../../scratch/qemu/orig/qemu-4.1.1/hw/i386/pc.c	2019-11-14 10:06:20.000000000 -0800
+++ ./hw/i386/pc.c	2021-03-28 15:31:57.247393400 -0700
@@ -2113,6 +2113,28 @@
 
     /* Super I/O */
     pc_superio_init(isa_bus, create_fdctrl, no_vmport);
+    /* Glide pass-through */
+    glidept_mm_init();
+    /* MESA pass-through */
+    mesapt_mm_init();
+}
+
+void glidept_mm_init(void)
+{
+    DeviceState *glidept_dev = NULL;
+
+    glidept_dev = qdev_new(TYPE_GLIDEPT);
+    sysbus_realize(SYS_BUS_DEVICE(glidept_dev), &error_fatal);
+    sysbus_mmio_map(SYS_BUS_DEVICE(glidept_dev), 0, GLIDEPT_MM_BASE);
+}
+
+void mesapt_mm_init(void)
+{
+    DeviceState *mesapt_dev = NULL;
+
+    mesapt_dev = qdev_new(TYPE_MESAPT);
+    sysbus_realize(SYS_BUS_DEVICE(mesapt_dev), &error_fatal);
+    sysbus_mmio_map(SYS_BUS_DEVICE(mesapt_dev), 0, MESAPT_MM_BASE);
 }
 
 void pc_nic_init(PCMachineClass *pcmc, ISABus *isa_bus, PCIBus *pci_bus)
diff -Nru ../../../scratch/qemu/orig/qemu-4.1.1/include/hw/i386/pc.h ./include/hw/i386/pc.h
--- ../../../scratch/qemu/orig/qemu-4.1.1/include/hw/i386/pc.h	2019-11-14 10:06:20.000000000 -0800
+++ ./include/hw/i386/pc.h	2021-03-28 15:31:57.262392900 -0700
@@ -173,6 +173,22 @@
 
 void gsi_handler(void *opaque, int n, int level);
 
+#if (((QEMU_VERSION_MAJOR << 8) | \
+      (QEMU_VERSION_MINOR << 4) | \
+       QEMU_VERSION_MICRO) < 0x510)
+#define qdev_new(x)         qdev_create(NULL,x)
+#define sysbus_realize(x,y) qdev_init_nofail((DeviceState *)x)
+#endif
+/* GLIDE pass-through */
+#define TYPE_GLIDEPT "glidept"
+#define GLIDEPT_MM_BASE 0xfbdff000
+void glidept_mm_init(void);
+
+/* MESA pass-through */
+#define TYPE_MESAPT "mesapt"
+#define MESAPT_MM_BASE 0xefffe000
+void mesapt_mm_init(void);
+
 /* vmport.c */
 #define TYPE_VMPORT "vmport"
 typedef uint32_t (VMPortReadFunc)(void *opaque, uint32_t address);
diff -Nru ../../../scratch/qemu/orig/qemu-4.1.1/include/sysemu/kvm.h ./include/sysemu/kvm.h
--- ../../../scratch/qemu/orig/qemu-4.1.1/include/sysemu/kvm.h	2019-11-14 10:06:20.000000000 -0800
+++ ./include/sysemu/kvm.h	2021-03-28 15:32:57.615186800 -0700
@@ -475,6 +475,8 @@

 #endif /* NEED_CPU_H */

+void kvm_update_guest_pa_range(uint64_t start_pa, uint64_t size, void *host_va, int readonly, int add);
+
 void kvm_cpu_synchronize_state(CPUState *cpu);
 void kvm_cpu_synchronize_post_reset(CPUState *cpu);
 void kvm_cpu_synchronize_post_init(CPUState *cpu);
diff -Nru ../../../scratch/qemu/orig/qemu-4.1.1/include/sysemu/whpx.h ./include/sysemu/whpx.h
--- ../../../scratch/qemu/orig/qemu-4.1.1/include/sysemu/whpx.h	2019-11-14 10:06:20.000000000 -0800
+++ ./include/sysemu/whpx.h	2021-03-28 15:31:57.289392800 -0700
@@ -27,6 +27,7 @@

 #ifdef CONFIG_WHPX

+void whpx_update_guest_pa_range(hwaddr, ram_addr_t, void *, int, int);
 int whpx_enabled(void);

 #else /* CONFIG_WHPX */
diff -Nru ../../../scratch/qemu/orig/qemu-4.1.1/include/ui/console.h ./include/ui/console.h
--- ../../../scratch/qemu/orig/qemu-4.1.1/include/ui/console.h	2019-11-14 10:06:20.000000000 -0800
+++ ./include/ui/console.h	2021-03-28 15:31:57.294392800 -0700
@@ -453,4 +453,21 @@
 /* input.c */
 int index_from_key(const char *key, size_t key_length);
 
+/* glidewnd.c */
+uintptr_t glide_prepare_window(int w, int h);
+void glide_release_window(void);
+uint32_t glide_window_stat(int);
+int glide_gui_getheight(void);
+int glide_gui_fullscreen(void);
+int is_glide_enabled(void);
+void glide_enabled_set(void);
+void glide_enabled_reset(void);
+
+/* mglcntx.c */
+uintptr_t mesa_prepare_window(void);
+void mesa_release_window(void);
+int is_mesa_enabled(void);
+void mesa_enabled_set(void);
+void mesa_enabled_reset(void);
+
 #endif
diff -Nru ../../../scratch/qemu/orig/qemu-4.1.1/target/i386/whpx-all.c ./target/i386/whpx-all.c
--- ../../../scratch/qemu/orig/qemu-4.1.1/target/i386/whpx-all.c	2019-11-14 10:06:21.000000000 -0800
+++ ./target/i386/whpx-all.c	2021-03-28 15:31:57.309340000 -0700
@@ -10,6 +10,7 @@

 #include "qemu/osdep.h"
 #include "cpu.h"
+#include "exec/ram_addr.h"
 #include "exec/address-spaces.h"
 #include "exec/ioport.h"
 #include "qemu-common.h"
@@ -1299,6 +1300,38 @@
                         memory_region_is_rom(mr), mr->name);
 }

+void whpx_update_guest_pa_range(hwaddr start_pa, ram_addr_t size, void *host_va, int readonly, int add)
+{
+    MemoryRegion mr;
+    MemoryRegionSection section;
+    RAMBlock ram_block;
+
+    memset(&ram_block, 0, sizeof(RAMBlock));
+    ram_block.mr = &mr;
+    ram_block.used_length = HOST_PAGE_ALIGN(size);
+    ram_block.max_length = HOST_PAGE_ALIGN(size);
+    ram_block.fd = -1;
+    ram_block.page_size = getpagesize();
+    ram_block.host = host_va;
+    ram_block.flags |= RAM_PREALLOC;
+
+    memory_region_init(&mr, NULL, NULL, HOST_PAGE_ALIGN(size));
+    mr.ram = true;
+    mr.ram_block = &ram_block;
+    mr.readonly = readonly;
+    mr.nonvolatile = false;
+
+    section.mr = &mr;
+    section.fv = 0;
+    section.offset_within_region = 0;
+    section.size = mr.size;
+    section.offset_within_address_space = start_pa;
+    section.readonly = mr.readonly;
+    section.nonvolatile = mr.nonvolatile;
+
+    whpx_process_section(&section, add);
+}
+
 static void whpx_region_add(MemoryListener *listener,
                            MemoryRegionSection *section)
 {
diff -Nru ../../../scratch/qemu/orig/qemu-4.1.1/ui/console.c ./ui/console.c
--- ../../../scratch/qemu/orig/qemu-4.1.1/ui/console.c	2019-11-14 10:06:21.000000000 -0800
+++ ./ui/console.c	2021-03-28 15:31:57.323394200 -0700
@@ -259,11 +259,25 @@
     ds->have_text = have_text;
 }
 
+static int glide_enabled = 0;
+int is_glide_enabled(void) { return glide_enabled; }
+void glide_enabled_set(void) { glide_enabled = 1; }
+void glide_enabled_reset(void) { glide_enabled = 0; }
+
+static int mesa_enabled = 0;
+int is_mesa_enabled(void) { return mesa_enabled; }
+void mesa_enabled_set(void) { mesa_enabled = 1; }
+void mesa_enabled_reset(void) { mesa_enabled = 0; }
+
 void graphic_hw_update(QemuConsole *con)
 {
     if (!con) {
         con = active_console;
     }
+    if (is_glide_enabled())
+        return;
+    if (is_mesa_enabled())
+        return;
     if (con && con->hw_ops->gfx_update) {
         con->hw_ops->gfx_update(con->hw);
     }
diff -Nru ../../../scratch/qemu/orig/qemu-4.1.1/ui/sdl2.c ./ui/sdl2.c
--- ../../../scratch/qemu/orig/qemu-4.1.1/ui/sdl2.c	2019-11-14 10:06:21.000000000 -0800
+++ ./ui/sdl2.c	2021-03-28 15:31:57.338399100 -0700
@@ -36,6 +36,8 @@
 static SDL_Surface *guest_sprite_surface;
 static int gui_grab; /* if true, all keyboard/mouse events are grabbed */
 
+static int gui_saved_width;
+static int gui_saved_height;
 static int gui_saved_grab;
 static int gui_fullscreen;
 static int gui_grab_code = KMOD_LALT | KMOD_LCTRL;
@@ -528,6 +530,14 @@
         sdl2_redraw(scon);
         break;
     case SDL_WINDOWEVENT_EXPOSED:
+	if (ev->window.data1 && ev->window.data2) {
+	    if ((ev->window.data1 == gui_saved_width) &&
+		(ev->window.data2 == gui_saved_height)) {
+		gui_saved_width = 0;
+		gui_saved_height = 0;
+	    }
+	    SDL_SetWindowSize(scon->real_window, ev->window.data1, ev->window.data2);
+	}
         sdl2_redraw(scon);
         break;
     case SDL_WINDOWEVENT_FOCUS_GAINED:
@@ -712,6 +722,101 @@
     SDL_QuitSubSystem(SDL_INIT_VIDEO);
 }
 
+uintptr_t glide_prepare_window(int w, int h)
+{
+    uintptr_t hwndSDL = 0;
+    SDL_SysWMinfo wmi;
+    SDL_Event ev1, *ev = &ev1;
+    int scr_w, scr_h;
+
+    if (!sdl2_console)
+        return hwndSDL;
+
+    SDL_VERSION(&wmi.version);
+    if (SDL_GetWindowWMInfo(sdl2_console[0].real_window, &wmi)) {
+#if defined(SDL_VIDEO_DRIVER_WINDOWS)	
+	hwndSDL = (uintptr_t)wmi.info.win.window;
+#elif defined(SDL_VIDEO_DRIVER_X11)
+	hwndSDL = (uintptr_t)wmi.info.x11.window;
+#else
+#error Unsupported window binding
+#endif
+    }
+    SDL_GetWindowSize(sdl2_console[0].real_window, &scr_w, &scr_h);
+    gui_saved_width = scr_w;
+    gui_saved_height = scr_h;
+
+    glide_enabled_set();
+    smp_mb();
+
+    ev->type = SDL_WINDOWEVENT;
+    ev->window.windowID = SDL_GetWindowID(sdl2_console[0].real_window);
+    ev->window.event = SDL_WINDOWEVENT_EXPOSED;
+    ev->window.data1 = w;
+    ev->window.data2 = h;
+    SDL_PushEvent(ev);
+
+    return hwndSDL;
+}
+
+void glide_release_window(void)
+{
+    glide_enabled_reset();
+    smp_mb();
+    SDL_Event ev1, *ev = &ev1;
+    ev->type = SDL_WINDOWEVENT;
+    ev->window.windowID = SDL_GetWindowID(sdl2_console[0].real_window);
+    ev->window.event = SDL_WINDOWEVENT_EXPOSED;
+    ev->window.data1 = gui_saved_width;
+    ev->window.data2 = gui_saved_height;
+    SDL_PushEvent(ev);
+}
+
+uint32_t glide_window_stat(int activate)
+{
+    int scr_w, scr_h;
+    uint32_t stat;
+    SDL_GetWindowSize(sdl2_console[0].real_window, &scr_w, &scr_h);
+    if (activate)
+	stat = (uint32_t)(((scr_h & 0xFFFFU) << 0x10) | scr_w);
+    else
+	stat = (((gui_saved_height & 0xFFFFU) << 0x10) | gui_saved_width)? 1:0;
+    return stat;
+}
+
+int glide_gui_getheight(void)
+{
+    int scr_w, scr_h;
+    SDL_GetWindowSize(sdl2_console[0].real_window, &scr_w, &scr_h);
+    return scr_h;
+}
+
+int glide_gui_fullscreen(void) { return gui_fullscreen; }
+
+uintptr_t mesa_prepare_window(void)
+{
+    uintptr_t hwndSDL = 0;
+    SDL_SysWMinfo wmi;
+
+    if (!sdl2_console)
+        return hwndSDL;
+
+    SDL_VERSION(&wmi.version);
+    if (SDL_GetWindowWMInfo(sdl2_console[0].real_window, &wmi)) {
+#if defined(SDL_VIDEO_DRIVER_WINDOWS)	
+	hwndSDL = (uintptr_t)wmi.info.win.window;
+#elif defined(SDL_VIDEO_DRIVER_X11)
+	hwndSDL = (uintptr_t)wmi.info.x11.window;
+#else
+#error Unsupported window binding
+#endif
+    }
+
+    return hwndSDL;
+}
+
+void mesa_release_window(void) { }
+
 static const DisplayChangeListenerOps dcl_2d_ops = {
     .dpy_name             = "sdl2-2d",
     .dpy_gfx_update       = sdl2_2d_update,
diff -Nru ../../../scratch/qemu/orig/qemu-4.1.1/vl.c ./vl.c
--- ../../../scratch/qemu/orig/qemu-4.1.1/vl.c	2019-11-14 10:06:21.000000000 -0800
+++ ./vl.c	2021-03-28 15:47:02.453489700 -0700
@@ -1795,6 +1795,13 @@
     }
 }

+static void feature(void)
+{
+    const char rev_[ALIGNED(1)]
+        ;
+    printf("  featuring qemu-3dfx@%s"__TIME__" "__DATE__" build\n", rev_);
+}
+
 static void version(void)
 {
     printf("QEMU emulator version " QEMU_FULL_VERSION "\n"
@@ -3171,6 +3178,7 @@
                 break;
             case QEMU_OPTION_version:
                 version();
+                feature();
                 exit(0);
                 break;
             case QEMU_OPTION_m:
